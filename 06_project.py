#!/usr/bin/env python
# coding: utf-8

# # ¬°Hola Oscar! üòä
# 
# Mi nombre es **Alejandro Castellanos** y hoy tengo el placer de ser el revisor de tu proyecto.
# 
# Voy a revisar todo tu c√≥digo con detalle, buscando tanto los puntos fuertes como aquellos en los que podr√≠as mejorar. Te dejar√© comentarios a lo largo del notebook, destacando lo que has hecho bien y sugiriendo ajustes donde sea necesario. Si encuentro alg√∫n error, no te preocupes, te lo har√© saber de forma clara y te dar√© informaci√≥n √∫til para que puedas corregirlo en la pr√≥xima. Si en alg√∫n punto tienes comentarios, si√©ntete libre de dejarlos tambi√©n.
# 
# 
# Encontrar√°s mis comentarios espec√≠ficos dentro de cajas verdes, amarillas o rojas, es muy importante que no muevas, modifiques o borres mis comentarios, con el fin de tener un seguimiento adecuado de tu proceso.:
# 
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si todo est√° perfecto.
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta.
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma:
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
# </div>
# 
# A continuaci√≥n te dejar√© un comentario general con mi valoraci√≥n del proyecto. **¬°Mi objetivo es que sigas aprendiendo y mejorando con cada paso!**

# ------

# <div class="alert alert-block alert-success">
# <b>Comentario General del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Oscar, has hecho un trabajo excepcional en este proyecto. Desde el excelente EDA hasta la manera sobresaliente en que abordaste el an√°lisis de los datos, tu enfoque ha sido meticuloso y profundo, respondiendo de manera efectiva todas las preguntas y tareas propuestas. Adem√°s, la forma en que incorporaste la interpretaci√≥n de los resultados y tus an√°lisis adicionales realmente le da vida al proyecto, mostrando que no es solo un conjunto de c√≥digos, sino un an√°lisis bien fundamentado y con un prop√≥sito claro. Las visualizaciones, la ingenier√≠a de caracter√≠sticas y la metodolog√≠a para la prueba de hip√≥tesis que implementaste son ejemplos perfectos de c√≥mo se puede realizar un an√°lisis de datos de manera profesional y detallada. ¬°Sigue as√≠, tu trabajo tiene un gran potencial y se nota el esfuerzo y la dedicaci√≥n que pusiste en este proyecto! √âxitos en tu pr√≥ximo Sprint üöÄ
# 
# </div>

# ----

# # Paso 1. Abre el archivo de datos y estudia la informaci√≥n general 

# ## Carga de librer√≠as, importaci√≥n e informaci√≥n del DF original

# In[1]:


# Carga de librer√≠as
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from math import factorial
from scipy import stats as st
import math as mt
import seaborn as sns


# In[2]:


# Importaci√≥n de DF
games=pd.read_csv('/datasets/games.csv')


# In[3]:


# Informaci√≥n general
games.info()


# In[4]:


# Revisi√≥n de filas duplicadas
print("Filas duplicadas: ",games.duplicated().sum())


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Siempre es una buena idea comprobar los datos duplicados para evitar errores o sesgos en el an√°lisis. Buen trabajo
# 
# </div>

# #### Comentarios paso 1
# 
# Debemos considerar la correcci√≥n de Min√∫sculas. Respecto a Snake_case, Descripci√≥n clara, Espacios iniciales y finales y Car√°cter de separaci√≥n (,), contin√∫a igual.

# # Paso 2. Prepara los datos

# ## Correcci√≥n en nombres de columnas, valores ausentes, tipos de datos, otros valores.

# ### Reemplaza los nombres de las columnas (ponlos en min√∫sculas).

# In[5]:


# Remplazo de nombres de columna por min√∫sculas
new_column_name=[]
for old_name in games.columns:
    name_lowered=old_name.lower()
    new_column_name.append(name_lowered)

games.columns=new_column_name
print(games.columns)


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Genial, ajustar los nombres de las columnas facilita su uso.
# 
# </div>

# ### Describe las columnas en las que los tipos de datos han sido cambiados y explica por qu√©.

# In[6]:


# Correcci√≥n de tipos de datos
games['year_of_release']=games['year_of_release'].astype('Int64')


# Year_of_Release. Los valores son categ√≥ricos, aunque los representaremos como enteros para que puedan ayudarnos en filtros y an√°lisis num√©rico de a√±os.

# ### Explica por qu√© rellenaste los valores ausentes como lo hiciste o por qu√© decidiste dejarlos en blanco.

# In[7]:


# Correcci√≥n de valores ausentes
games['name'] = games['name'].fillna('Unknown')
games['genre'] = games['genre'].fillna('Unknown')


# Name. 2 valores	No es necesario saber el Nombre, podemos colocar "Unknown".
# 
# Genre. 2 valores No es necesario saber el G√©nero, podemos colocar "Unknown", son los mismos registros que los ausentes en Nombre.

# In[8]:


# B√∫squeda de dato err√≥neo
games.loc[15957,'name':'year_of_release']


# In[9]:


# Correcci√≥n de dato err√≥neo
games.loc[15957,'year_of_release']=2010


# In[10]:


# Comprobaci√≥n de correcci√≥n de dato err√≥neo
games.loc[15957,'name':'year_of_release']


# Strongest Tokyo University Shogi DS. Parece contar con un error ya que la plataforma DS no exist√≠a en 1985, investigando sobre el juego, se tiene informaci√≥n de que el lanzamiento fue en 2010 (coincide con el rango de a√±os de lanzamientos de DS), se decide hacer la correcci√≥n.

# ### ¬øPor qu√© crees que los valores est√°n ausentes? Brinda explicaciones posibles.

# Name 2 valores. Puede deberse a un error en la alimentaci√≥n de datos, las ventas de 2.42 no representan gran afectaci√≥n para el an√°lisis, se decide sustituir por 'Unknown'.
# 
# Year_of_Release 269 valores. Puede deberse a un error en la alimentaci√≥n de datos, las ventas de 98.92 corresponden al 1% del total de las ventas, no parece ser de afectaci√≥n importante para el an√°lisis, sin embargo se opta por considerar el √∫ltimo a√±o de lanzamientos por plataforma ya que los periodos son base para el an√°lisis.
# 
# Genre 2 valores. Puede deberse a un error en la alimentaci√≥n de datos, las ventas de 2.42 no representan gran afectaci√≥n para el an√°lisis, se decide sustituir por 'Unknown'. Son los mismos registros que 'name'.
# 
# Critic_Score 8578 valores. Probablemente las calificaciones por cr√≠ticos y usuarios tuvieron una evoluci√≥n similar a los ratings, por lo cual en a√±os previos a 1994 se carece de dichos datos en nuestro DF, (salvo 3 registros que parecen irrelevantes), sin embargo a nivel de ventas todos los registros carentes de este dato s√≥lo representan el 7%, la afectaci√≥n es m√≠nima para el an√°lisis. En lo posterior a 1994 tambi√©n existen valores ausentes, esto puede ser la falta de alimentaci√≥n de datos, este caso s√≠ puede ser representativo analizando ventas ya que equivale al 30% de las ventas totales.
# 
# User_Score 6701 valores. Considerando la misma raz√≥n que la calificaci√≥n de los cr√≠ticos, en a√±os previos a 1994 se carece de dichos datos en nuestro DF, (salvo 3 registros que parecen irrelevantes), sin embargo a nivel de ventas todos los registros carentes de este dato previamente a 1994 s√≥lo representan el 7% (mismos registros que critic_score), la afectaci√≥n es m√≠nima para el an√°lisis. En lo porsterior a 1994 tambi√©n existen valores ausentes, esto puede deberse a la falta de alimentaci√≥n de datos, este caso s√≠ puede ser representativo analizando ventas ya que equivale al 25% de las ventas totales, tomando en cuenta que muchos registros coinciden con los ausentes de critic_score.
# 
# Rating 6766 valores. El rating ESRB fue establecido en 1994, por lo que parece normal que los juegos previos a dicho periodo carezcan de dicha categorizaci√≥n. 7% del total de ventas en a√±os previos a 1994 y 25% para a√±os posteriores (registros coincidentes con los Scores).

# ### Presta atenci√≥n a la abreviatura TBD: significa "to be determined" (a determinar). Especifica c√≥mo piensas manejar estos casos.

# In[11]:


# Conversi√≥n a valor ausente
games['user_score'] = games['user_score'].replace(['tbd'], [np.nan])


# In[12]:


# Cambio de tipo de datos
games['user_score']=games['user_score'].astype('float64')


# User_Score. 2424 valores "tbd" Cambiar por dato ausente, para el presente estudio ser√° imposible obtener los valores reales y requerimos que los valores sean num√©ricos por lo que el desconocimiento influye de igual manera si son considerados ausentes.
# 
# User_Score. Es preferible representar los valores como float64 debido a que se describen con decimales, considerados con un valor m√°ximo de 10

# In[13]:


# Comprobaci√≥n de correcciones
games.info()


# In[14]:


# Se revisa la informaci√≥n para elegir c√≥mo rellenar los valores ausentes de 'critic_score' 
games['critic_score'].describe()


# In[15]:


# Se revisa la informaci√≥n para elegir c√≥mo rellenar los valores ausentes de 'user_score'
games['user_score'].describe()


# En ambos casos se observa que existe una buena cantidad de valores alejados del rango intercuart√≠lico por lo que se opta por rellenar los valores ausentes con la mediana.

# In[16]:


# Aplicaci√≥n de la mediana para los valores ausentes
critic_scr_median = games['critic_score'].median()
games['critic_score'].fillna(critic_scr_median,inplace=True)


# In[17]:


# Aplicaci√≥n de la mediana para los valores ausentes
user_scr_median = games['user_score'].median()
games['user_score'].fillna(user_scr_median,inplace=True)


# In[18]:


# DF despu√©s de correcciones
games


# Se presenta la informaci√≥n completando las correcciones antes mencionadas.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Muy buen trabajo con los datos faltantes, aunque para el an√°lisis que estamos haciendo se puede usar tu aproximaci√≥n, m√°s adelante cuando est√©s creando modelos predicitivos aprenderas t√©cnicas de imputaci√≥n m√°s avanzadas.
# 
# </div>

# ## Adici√≥n de informaci√≥n

# Se considera agregar informaci√≥n que pueda ser √∫til para el an√°lisis, tal como:
# 
# * Desarrollador
# * Nombre de la Plataforma
# * Total de ventas
# * √öltimo a√±o de lanzamiento por plataforma
# 
# As√≠ tambi√©n se retoma la correcci√≥n de valores ausentes de year_of_release, pues es necesario determinar la informaci√≥n adicional antes de dicha correcci√≥n. 
# 
# Se obtendr√° entonces:
# 
# * A√±o de lanzamiento definitivo
# * D√©cada
# * N√∫mero de lanzamientos por t√≠tulo
# * N√∫mero de a√±os de lanzamientos por t√≠tulo
# * Clasificaci√≥n definitiva
# * Calificaci√≥n de usuarios de 1 a 100

# In[19]:


# Se crea dataframe de desarrolladores y nombre de plataformas
complement_data={'platform':['2600','NES','PC','GB','SNES','GEN','GG','SCD','NG','PS','SAT','3DO','TG16','N64','PCFX','DC','WS','PS2','GBA','XB','GC','DS','PSP','X360','Wii','PS3','3DS','PSV','WiiU','PS4','XOne'],
               'developer':['Atari','Nintendo','PC','Nintendo','Nintendo','Sega','Sega','Sega','SNK Corporation','Sony','Sega','The 3DO Company','NEC','Nintendo','NEC','Sega','Bandai','Sony','Nintendo','Microsoft','Nintendo','Nintendo','Sony','Microsoft','Nintendo','Sony','Nintendo','Sony','Nintendo','Sony','Microsoft'],
               'platform_name':['Atari 2600','Nintendo (Family)','PC','Game Boy','Super Nintendo','Genesis','Game Gear','Sega CD','NeoGeo','Play Station','Sega Saturn','3DO Interactive Multiplayer','TurboGrafx-16','Nintendo 64','PC-FX','Dreamcast','WonderSwan','Play Station 2','Game Boy Advance','Xbox','Nintendo GameCube','Game Boy DS','Play Station PSP','Xbox 360','Nintendo Wii','Play Station 3','Game Boy 3DS','Play Station Vita','Nintendo WiiU','Play Station 4','Xbox One']}
complement=pd.DataFrame(data=complement_data)
complement


# Para efectos pr√°cticos es mejor seguir usando la informaci√≥n de plataforma pero visualmente se representan mejor con el nombre. el desarrollador puede ser m√°s √∫til en algunos casos.

# In[20]:


# Adici√≥n de columnas 'developer' y 'platform_name' a DF
games=games.merge(complement,on='platform', how='left')


# In[21]:


games


# ### Calcula las ventas totales (la suma de las ventas en todas las regiones) para cada juego y coloca estos valores en una columna separada.

# In[22]:


# C√°lculo de ventas totales
tlt_sls=games['na_sales']+games['eu_sales']+games['jp_sales']+games['other_sales']


# In[23]:


# Adici√≥n de columna 'total_sales'
games.insert(8,"total_sales",tlt_sls)
games


# In[24]:


# Determinaci√≥n de √∫ltimo a√±o de lanzamiento por plataforma
last_year_plt=games.groupby('platform')['year_of_release'].max().reset_index()
last_year_plt=last_year_plt.rename(columns={'year_of_release':'last_year_of_platform'})
last_year_plt


# In[25]:


# Adici√≥n de 'last_year_of_platform' a DF
games=games.merge(last_year_plt,on='platform', how='left')
games


# In[26]:


# Correcci√≥n de NaN en 'year_of_release'
games['year_of_release'] = games['year_of_release'].fillna(0)


# In[27]:


# Condicional: si 'year_of_release' es igual a '0', agrega 'last_year_of_platform' en su lugar
year_def = (games['year_of_release']).mask(games['year_of_release'] == 0,games['last_year_of_platform'])


# In[28]:


# Se agrega columna 'year_of_release_def'
games.insert(3,"year_of_release_def",year_def)


# In[29]:


# Depuraci√≥n de columnas
games=games.drop(['year_of_release','last_year_of_platform'], axis='columns')


# In[30]:


# DF con a√±os de lanzamiento definitivos
games


# Para la correcci√≥n de valores ausentes en 'year_of_release', se decidi√≥ usar el √∫ltimo a√±o de lanzamiento de otros registros de la plataforma en cuesti√≥n. Como se coment√≥ previamente, la afectaci√≥n a nivel de ingresos es m√≠nima (7%), el descarte o reasignaci√≥n por a√±os activos por plataforma genera el mismo impacto, pero es mejor completar los datos para un mejor manejo de la informaci√≥n.

# In[31]:


# La divisi√≥n de lanzamientos por d√©cada puede ayudar al an√°lisis. Se crea columna y se agrega a DF
dcd=[]
for year in games['year_of_release_def']:
    if year <1980:
        dcd.append("Indefinite")
    elif year >=1980 and year <1990:
        dcd.append("1980s")
    elif year >=1990 and year <2000:
        dcd.append("1990s")
    elif year >=2000 and year <2010:
        dcd.append("2000s")
    elif year >=2010 and year <2020:
        dcd.append("2010s")


# In[32]:


# Adici√≥n de columna 'decade' a DF
games.insert(4,"decade",dcd)
games


# La asignaci√≥n por d√©cadas puede ayudar al an√°lisis en algunos puntos.

# In[33]:


# Se determina cu√°ntas veces se han lanzado los t√≠tulos
times_name_released=games.groupby('name')['platform'].count().reset_index()
times_name_released=times_name_released.rename(columns={'platform':'times_released'})
times_name_released


# Observamos 11,560 registros √∫nicos de un total de 16,715 filas en el DF. Esto significa que la diferencia (5,155) son repeticiones t√≠tulos lanzados m√°s de una vez.

# In[34]:


# Se agrega columna con n√∫mero de lanzamientos por t√≠tulo, 'times_released'
games=games.merge(times_name_released,on='name', how='left')
games


# In[35]:


print("Repeticiones de t√≠tulos lanzados m√°s de una vez: ",games['name'].duplicated().sum())


# Comprobamos las repeticiones de t√≠tulos lanzados m√°s de una vez. 5,155 registros

# In[36]:


# Filtro de m√°s de un lanzamiento por t√≠tulo
re_rlsd_fltr=games.query("times_released>1")
re_rlsd_fltr


# Se determina que 7,961 registros se ven involucrados en casos de m√°s de 1 lanzamiento. 

# In[37]:


# Resumen de lanzamientos m√∫ltiples por a√±o
re_rlsd_pvt=re_rlsd_fltr.pivot_table(index=['name','year_of_release_def'],
                                    values=['times_released'],
                                    ).reset_index()
re_rlsd_pvt


# Observamos 3,689 registros √∫nicos de un total de 7,961 filas en el filtro de casos de m√°s de 1 lanzamiento. En este caso ocupamos el 'year_of_release_def' para hacer distinci√≥n de los casos que hacen los m√∫ltiples lanzamientos pero en diferentes a√±os.

# In[38]:


# Determinaci√≥n de n√∫mero de a√±os por lanzamientos m√∫ltiples (t√≠tulos lanzados en a√±os diferentes)
vdgm_rlsd_diffyear=re_rlsd_pvt.groupby('name')['year_of_release_def'].count().reset_index()
vdgm_rlsd_diffyear=vdgm_rlsd_diffyear.rename(columns={'year_of_release_def':'num_years_release'})
vdgm_rlsd_diffyear


# Se hace el conteo de a√±os resultando 2,806 t√≠tulos, de los cuales descartaremos los que s√≥lo consideran un a√±o.

# In[39]:


# T√≠tulos lanzados en 2 o m√°s a√±os diferentes
vdgm_rlsd_diffyear_fltr=vdgm_rlsd_diffyear.query("num_years_release>1")
vdgm_rlsd_diffyear_fltr


# Son 786 t√≠tulos con m√∫ltiples lanzamientos en diferentes a√±os.

# In[40]:


# Adici√≥n de columna 'num_years_release' a DF
games=games.merge(vdgm_rlsd_diffyear_fltr,on='name', how='left')


# In[41]:


# Por descarte, el resto de t√≠tulos se lanzaron en un solo a√±o
games['num_years_release']=games['num_years_release'].fillna(1)


# In[42]:


# Requerimos la columna como entero
games['num_years_release']=games['num_years_release'].astype('Int64')


# Se agrega la columna 'num_years_release' representando el n√∫mero de a√±os de lanzamientos.

# In[43]:


games


# In[44]:


# Complemento de valores ausentes en 'rating' basados en los lanzamientos m√∫ltiples de t√≠tulos que en un registro pueden tener asignaci√≥n de valor y en otro registro, valor ausente.
# Se filtra 'rating' diferente a NaN y 'times_released' mayor a 1.
rating_fltr=games.query("~rating.isna() & times_released>1")
# Se conforma el listado de t√≠tulos filtrados
rating_pvt=games.pivot_table(index=['name','rating'],
                             values=['other_sales'],
                             aggfunc='count',
                            ).reset_index()
rating_pvt


# Se presentan los t√≠tulos con clasificaci√≥n.

# In[45]:


# Algunos casos fueron catalogados con m√°s de una categor√≠a, elegiremos s√≥lo una.
tst_rating_pvt=rating_pvt.query("name=='Barnyard'")
tst_rating_pvt


# In[46]:


# Depuraci√≥n de clasificaci√≥n de t√≠tulos m√∫ltiple.
rating_pvt.drop_duplicates(subset='name',inplace=True)
rating_pvt=rating_pvt.drop('other_sales', axis='columns')
rating_pvt


# Se eliminan los registros m√∫ltiples t√≠tulos con m√°s de una clasificaci√≥n, a manera de dejar s√≥lo una.

# In[47]:


# Adici√≥n de 'rating_y' a DF
games=games.merge(rating_pvt,on='name', how='left',validate='many_to_one')


# In[48]:


games


# Se agrega la columna de rating_y para realizar el relleno de valores ausentes (comparaci√≥n con ratin_x).

# In[49]:


# Condicional: si 'rating_x' es igual a 'NaN', agrega 'rating_y' en su lugar
rating_def = (games['rating_x']).mask(games['rating_x'].isna(),games['rating_y'])


# In[50]:


# Se agrega columna 'rating_def'
games.insert(13,"rating_def",rating_def)
#tst_rat_fltr=games.query("rating_x.isna() & ~rating_def.isna()")


# In[51]:


# Depuraci√≥n de columnas
games=games.drop(['rating_x','rating_y'], axis='columns')


# In[52]:


# C√°lculo de calificaci√≥n de usuarios de 1 a 100
user_score_100=games['user_score']*10


# In[53]:


# Se agrega columna 'user_score_to_100', para comparaciones gr√°ficas
games.insert(12,"user_score_to_100",user_score_100)


# In[54]:


games


# Se presenta el DF games definitivo para el an√°lisis.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# ¬°Excelente trabajo con el desarrollo de ingenier√≠a de caracter√≠sticas! Incorporar este tipo de t√©cnicas en proyectos de ciencia de datos es fundamental, ya que permite resaltar patrones y relaciones clave en los datos que pueden mejorar significativamente el rendimiento de los modelos. Tu enfoque no solo demuestra un entendimiento profundo de los datos, sino tambi√©n creatividad y capacidad anal√≠tica para transformar informaci√≥n cruda en caracter√≠sticas m√°s relevantes y predictivas. Esto no solo optimiza los resultados del an√°lisis, sino que tambi√©n aporta mayor interpretabilidad, lo cual es invaluable al comunicar hallazgos y tomar decisiones basadas en datos. ¬°Sigue as√≠!
# 
# </div>

# # Paso 3. Analiza los datos

# ## An√°lisis general de ingresos

# Previamente a los pasos solicitados en la descripci√≥n del proyecto, realizamos un an√°lisis de los ingresos en general para tener mejor noci√≥n del comportamiento de los mismos por totales, regiones y el comportamiento a trav√©s de los a√±os.

# In[55]:


# Ingresos totales y porcentajes por √°rea
cols_to_totl=['na_sales','eu_sales','jp_sales','other_sales','total_sales']
games_total_sales=games[cols_to_totl].sum().to_frame().reset_index()
games_total_sales=games_total_sales.rename(columns={'index':'area_sales',0:'sales'})
games_total_sales['%_sales']=games_total_sales['sales']/8915.71*100
games_total_sales


# In[56]:


# Gr√°fico de Ingresos totales y porcentajes por √°rea
cols_to_totl=['na_sales','eu_sales','jp_sales','other_sales']
games_total_sales_grph=games[cols_to_totl].sum().to_frame()
games_total_sales_grph=games_total_sales_grph.rename(columns={'index':'area_sales',0:'sales'})
games_total_sales_grph

games_total_sales_grph.plot.pie(y='sales',figsize=(7,7),autopct='%1.0f%%')

plt.title("Total sales by area")
plt.ylabel("Sales")
plt.legend(['North America','Europe','Japan','Others'],title="Area")

plt.show()


# Se observa que las mejores ventas se presentan desde Norte am√©rica abarcando un 49%, seguidas de Europa con el 27%, Jap√≥n con el 15% y otras regiones con 9%, sobre el total de ventas.
# Esto puede deberse a la diferencia en magnitudes de poblaci√≥n entre cada regi√≥n, a su vez, las poblaciones consumidoras de videojuegos estar√°n sujetas a diferencias en magnitudes similares a las de poblaciones (excepto las otras regiones pero en este caso se est√°n analizando las regiones de mejor mercado de videojuegos).

# In[57]:


# Gr√°fico de Ingresos totales por a√±o
vdgm_released_grp = games.pivot_table(index=['year_of_release_def'],
                              values=['na_sales','eu_sales','jp_sales','other_sales'],
                              aggfunc={'na_sales':'sum','eu_sales':'sum','jp_sales':'sum','other_sales':'sum'}
                             )
vdgm_released_grp


vdgm_released_grp.plot(figsize=(10,5),alpha=1,linestyle='--',linewidth='2',color=['orange','green','dodgerblue','red'])

plt.title("Area sales (1980-2016)")
plt.xlabel("Year")
plt.ylabel("USD (millions)")
plt.legend(['EU','JP','NA','Other'],title="Area")

plt.show()


# Se toman en cuenta dos escenarios principales: antes de 1995 y a√±os posteriores. Aparte de lo mencionado en el punto anterior, los a√±os previos a 1995 representan una etapa de descubrimiento de los videojuegos (desde la d√©cada de los 1950s) y primeras propuestas para el p√∫blico general. El desarrollo del segmento fue muy lento, siendo Norte am√©rica y Jap√≥n las regiones que se mantuvieron en los primeros lugares de ventas. Posteriormente a 1995 la evoluci√≥n del segmento de videojuegos creci√≥ de manera significativa en todas las regiones, pero en este caso, Europa se convierte en la segunda mejor regi√≥n en cuanto al consumo, superando a Jap√≥n y quedando por debajo de Norte am√©rica.
# 
# Al final del gr√°fico se aprecia un declive en todas las regiones pero debemos tomar en cuenta que la informaci√≥n no contempla la d√©cada de los 2010s completa por lo que comparando con la d√©cada de los 2000s a nivel de ventas (2614.36 millones de d√≥lares y 4633.23 millones de d√≥rales, respectivamente), podr√≠a asemejarse el importe de las ventas totales.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Muy buen interpretaci√≥n de los datos, esto permite darle mayor valor a la informaci√≥n que has obtenido.
# 
# </div>

# ### Mira cu√°ntos juegos fueron lanzados en diferentes a√±os. ¬øSon significativos los datos de cada per√≠odo?

# In[58]:


# Juegos lanzados, ventas por √°rea y totales, y plataformas activas por d√©cada
vdgm_released_pvt = games.pivot_table(index=['decade'],
                              values=['name','platform','na_sales','eu_sales','jp_sales','other_sales','total_sales'],
                              aggfunc={'name':'count','platform':'nunique','na_sales':'sum','eu_sales':'sum','jp_sales':'sum','other_sales':'sum','total_sales':'sum'}
                             ).reset_index()
vdgm_released_pvt=vdgm_released_pvt.rename(columns={'name':'number_videogames'})
vdgm_released_pvt


# En complemento con lo anterior explicado, observamos el n√∫mero de videojuegos lanzados y el n√∫mero de plataformas activas en el mercado por d√©cada, demostrando el crecimiento a partir de la √©poca de los 1990s.

# In[59]:


# Juegos lanzados, ventas por √°rea y totales, y plataformas activas por a√±o
vdgm_released_yr_pvt = games.pivot_table(index=['year_of_release_def'],
                              values=['name','platform','na_sales','eu_sales','jp_sales','other_sales','total_sales'],
                              aggfunc={'name':'count','platform':'nunique','na_sales':'sum','eu_sales':'sum','jp_sales':'sum','other_sales':'sum','total_sales':'sum'}
                             ).reset_index()
vdgm_released_yr_pvt


# In[60]:


# Juegos lanzados por a√±o
vdgm_released_yr_pvt = games.pivot_table(index=['year_of_release_def'],
                              values=['name'],
                              aggfunc={'name':'count'}
                             )

vdgm_released_yr_pvt.plot(figsize=(10,5),color='yellowgreen', legend=False, kind='bar', ec='black', grid=True)

plt.title("Number of video games released per year")
plt.xlabel("Years")
plt.ylabel("Number of video games")

plt.show()


# Se presenta el gr√°fico de la informaci√≥n explicada anteriormente por a√±os.

# ### Observa c√≥mo var√≠an las ventas de una plataforma a otra.

# Para el presente punto es importante comentar que siendo los primeros a√±os una etapa de desarrollo inicial del mercado de videojuegos, muchos desarrolladores pioneros o experimentales, no continuaron en el mercado de creaci√≥n de plataformas en a√±os posteriores.

# In[61]:


# Ventas por plataforma y desarrollador, y a√±o de primer lanzamiento
sls_pltfrm_yrs_pvt = games.pivot_table(index=['developer','platform'],
                                       values=['total_sales','year_of_release_def'],
                                       aggfunc={'total_sales':'sum','year_of_release_def':'min'}
                                       ).fillna(0)
sls_pltfrm_yrs_pvt.sort_values(['developer','total_sales'],ascending=False).reset_index()


# In[62]:


# Gr√°fico de Ventas por plataforma y desarrollador
sls_pltfrm_yrs_grph = games.pivot_table(index=['developer','platform'],
                                       values=['total_sales'],
                                       aggfunc={'total_sales':'sum'}
                                       ).fillna(0)
sls_pltfrm_yrs_grph=sls_pltfrm_yrs_grph.sort_values(['developer','total_sales'],ascending=False)

sls_pltfrm_yrs_grph.plot(figsize=(10,5),color='lightseagreen', legend=False, kind='bar', ec='black',grid=True)

plt.title("Sales by developer-platform")
plt.xlabel("Platform")
plt.ylabel("USD (millions)")

plt.show()



# En conclusi√≥n al presente punto, se deduce que los desarrolladores m√°s importantes son: Sony, Nintendo y Microsoft. Sin dejar de mencionar a Sega que aunque no alcanz√≥ relevancia comercial a nivel de ventas, fue el desarrollador con diversas propuestas de plataformas de 1990 a 1998. Se presenta el gr√°fico.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente forma de presentar la informaci√≥n, tal vez valdr√≠a la pena darles un idenditficador de color para hacer m√°s f√°cil la interpretaci√≥n de los datos.
# 
# </div>

# ### Elige las plataformas con las mayores ventas totales y construye una distribuci√≥n basada en los datos de cada a√±o.

# Se considera un listado de las mejores 5 plataformas a nivel de ventas totales.

# In[63]:


# Elecci√≥n de Top5 de plataformas con mejores ventas
t5_sls_pltfrm_yrs_pvt = games.pivot_table(index=['developer','platform'],
                                       values=['total_sales','year_of_release_def'],
                                       aggfunc={'total_sales':'sum','year_of_release_def':'min'}
                                       ).fillna(0)
t5_sls_pltfrm_yrs_pvt=t5_sls_pltfrm_yrs_pvt.sort_values('total_sales',ascending=False).head(5)
t5_sls_pltfrm_yrs_pvt


# In[64]:


# Filtro de Top5 de plataformas con mejores ventas
t5_sls_yrs_fltr=games.query("platform==['PS2','X360','PS3','Wii','DS']")


# In[65]:


# Desglose de ventas por a√±o de Top5
t5_sls_yrs_pvt = t5_sls_yrs_fltr.pivot_table(index=['year_of_release_def'],
                                             columns=['platform'],
                                       values=['total_sales'],
                                       aggfunc={'total_sales':'sum'}
                                       ).fillna(0)
t5_sls_yrs_pvt


# In[66]:


# Gr√°fico de ventas por a√±o de Top5
t5_sls_yrs_pvt.plot(figsize=(10,5),alpha=1,linestyle='--',linewidth='2',color=['thistle','lightblue','dodgerblue','coral','greenyellow'])

plt.title("Top 5 best selling platforms")
plt.xlabel("Year")
plt.ylabel("USD (millions)")
plt.legend(['DS','PS2','PS3','Wii','X360'],title="Platform")

plt.show()


# Se presenta el gr√°fico de las 5 plataformas con mejor √©xito comercial de 1980 a 2016, se observan los periodos de crecimiento y declive, as√≠ como los puntos m√°s altos en ventas, seg√∫n los lanzamientos de videojuegos por plataforma, siendo PS2 el m√°s exitoso, seguido de X360, PS3, Wii y DS.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Es correcto, se observa una consistencia en el periodo de vida de una consola a patir de los 2000
# 
# </div>

# ### Busca las plataformas que sol√≠an ser populares pero que ahora no tienen ventas.

# Similarmente al punto anterior, se toma un listado de 5 plataformas exitosas omitiendo las que siguen con lanzamientos vigentes en 2016, por lo que seguimos considerando a DS y PS2, complementados con PS, GBA y PSP.

# In[67]:


# Elecci√≥n de Top5 de plataformas populares, descontinuadas al 2016
t5_fam_pltfrm_yrs_pvt = games.pivot_table(index=['developer','platform'],
                                       values=['total_sales','year_of_release_def'],
                                       aggfunc={'total_sales':'sum','year_of_release_def':'max'}
                                       ).fillna(0)
t5_fam_pltfrm_yrs_pvt=t5_fam_pltfrm_yrs_pvt.sort_values('total_sales',ascending=False)
t5_fam_pltfrm_yrs_pvt=t5_fam_pltfrm_yrs_pvt.query("year_of_release_def<2016")
t5_fam_pltfrm_yrs_pvt.head(5)


# In[68]:


# Filtro de Top5 de plataformas populares, descontinuadas al 2016
t5_fam_discont_yrs_fltr=games.query("platform==['PS2','DS','PS','GBA','PSP']")


# In[69]:


# Desglose de Top5 de plataformas populares, descontinuadas al 2016 por a√±o
t5_fam_discont_yrs_pvt = t5_fam_discont_yrs_fltr.pivot_table(index=['year_of_release_def'],
                                             columns=['platform'],
                                       values=['total_sales'],
                                       aggfunc={'total_sales':'sum'}
                                       ).fillna(0)
t5_fam_discont_yrs_pvt


# In[70]:


# Gr√°fico de Top5 de plataformas populares, descontinuadas al 2016 por a√±o
t5_fam_discont_yrs_pvt.plot(figsize=(10,5),alpha=1,linestyle='--',linewidth='2',color=['thistle','darkviolet','darkgray','lightblue','navy'])

plt.title("Top 5 popular platforms (discontinued)")
plt.xlabel("Year")
plt.ylabel("USD (millions)")
plt.legend(['DS','GBA','PS','PS2','PSP'],title="Platform")

plt.show()


# Se presenta el gr√°fico de las 5 plataformas con mejor √©xito comercial de 1980 a 2015 (descontinuadas al 2016), se observan los periodos de crecimiento y declive, as√≠ como los puntos m√°s altos en ventas, seg√∫n los lanzamientos de videojuegos por plataforma, siendo PS2 el m√°s exitoso, seguido de DS, PS, GBA y PSP.

# ### ¬øCu√°nto tardan generalmente las nuevas plataformas en aparecer y las antiguas en desaparecer?

# Este es un punto complicado de explicar y depende mucho de las consideraciones que se tomen en cuenta, ya que trat√°ndose de diferentes desarrolladores y la competencia que se genera entre ellos los lanzamientos de nuevas plataformas suelen variar.
# Para nuestro an√°lisis consideraremos el desarrollador, el tipo de plataforma ("home consoles" o "handheld consoles") y el rango de a√±os de lanzamiento de videojuegos de los 4 principales desarrolladores de plataformas (Sony, Sega, Nintendo y Microsoft).

# In[71]:


# Filtro de mejores desarrolladores
dvlpr_yrs_rlsd_fltr=games.query("developer==['Microsoft','Nintendo','Sega','Sony']")


# In[72]:


# Comparaci√≥n de rango de tiempo de lanzamientos por desarrollador y plataforma
dvlpr_yrs_rlsd_pvt = dvlpr_yrs_rlsd_fltr.pivot_table(index=['developer','platform'],
                                       values='year_of_release_def',
                                       aggfunc={'year_of_release_def':['min','max']}
                                       ).fillna(0)
dvlpr_yrs_rlsd_pvt['years_range']=dvlpr_yrs_rlsd_pvt['max']-dvlpr_yrs_rlsd_pvt['min']
dvlpr_yrs_rlsd_pvt=dvlpr_yrs_rlsd_pvt.sort_values(['developer','min'],ascending=False).reset_index()
dvlpr_yrs_rlsd_pvt


# Sega lanzaba una plataforma pr√°cticamente cada a√±o con excepci√≥n del Dreamcast que tard√≥ 4 a√±os con referencia en su predecesora. Los periodos de lanzamiento de videojuegos fluct√∫an mucho, desde hacer lanzamientos √∫nicamente en el a√±o de lanzamiento de la plataforma hasta una actividad de 10 a√±os de lanzamientos en el caso de Dreamcast.
# 
# Los otros tres desarrolladores siguen activos y presentan casos relevantes.
# 
# Nintendo cuenta con plataformas de casa, desde el NES en 1983, SNES en 1990, N64 en 1996, GC en 2001, Wii en 2006 y WiiU en 2012, lo que corresponde a rangos de 5 a 7 a√±os entre una plataforma y su sucesora.
# 
# Nintendo se desarroll√≥ tambi√©n en un mercado importante para las consolas port√°tiles desde 1988 con el Game Boy durando 13 a√±os en el mercado. Posteriormente Game Boy Advance en el 2000, DS en 2004 y 3DS en 2011. Esto resulta en periodos irregulares desde 4 a 12 a√±os de distancia (de 4 a 7 a√±os en las plataformas m√°s recientes).
# 
# Sony gener√≥ competencia en port√°tiles con Nintendo con PSP en 2004 y PSV en 2011 contra DS y 3DS respectivamente, 5 a√±os de rango en ambos casos de desarrolladores.
# 
# Por otro lado, Sony compite con Microsoft en cuanto a las plataformas de casa, PS en 1994, PS2 contra X-Box en el 2000 , PS3 contra X360 en 2006 y 2005 respectivamente y PS4 y XOne en 2013, con rangos de a√±os entre plataformas de 6 a 8.
# 
# Considerando que esta competencia tambi√©n incluye a las plataformas de casa de Nintendo con s√≥lo un a√±o de diferencia en cuanto al lanzamiento de cada plataforma.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Oscar has dado respuesta a esta pregunta de una manera clara y detallada, muy buen trabajo.
# 
# </div>

# ### Determina para qu√© per√≠odo debes tomar datos. Para hacerlo mira tus respuestas a las preguntas anteriores. Los datos deber√≠an permitirte construir un modelo para 2017.

# Se opta por las plataformas con lanzamientos activos de videojuegos en la d√©cada de los 2010s.

# In[73]:


# Comparaci√≥n de plataformas por ventas totales y √∫ltimo a√±o de lanzamiento de t√≠tulos
pltfrm_f17_pvt = games.pivot_table(index=['developer','platform'],
                                       values=['total_sales','year_of_release_def'],
                                       aggfunc={'total_sales':'sum','year_of_release_def':'max'}
                                       ).fillna(0)
pltfrm_f17_pvt.sort_values(['year_of_release_def'],ascending=False).reset_index()


# Seleccionamos los casos que consideran t√≠tulos can lanzamientos de 2010 en adelante.

# ### Trabaja solo con los datos que consideras relevantes. Ignora los datos de a√±os anteriores.

# Obtenemos los datos seg√∫n las condiciones anteriores. Esto considerar√° √∫nicamente a los 3 desarrolladores m√°s importantes de plataformas (Sony, Nintendo, Microsoft) y PC.

# In[74]:


# filtro de plataformas por mejores ventas totales y √∫ltimo a√±o de lanzamiento de t√≠tulos durante d√©cada de 2010s. DF Games17
games17=games.query("platform==['Wii','X360','PS3','XOne','PS4','PSV','3DS','PC','WiiU','PSP','DS','PS2'] & year_of_release_def>2009")
games17


# Se presenta la informaci√≥n de 5,473 filas a considerar.

# ### ¬øQu√© plataformas son l√≠deres en ventas? ¬øCu√°les crecen y cu√°les se reducen? Elige varias plataformas potencialmente rentables.

# Presentamos el listado a partir del DF Games17 para observar el comportamiento de las ventas.

# In[75]:


# Comparaci√≥n de ventas de plataformas Games17
pltfrm_f17_lead_pvt = games17.pivot_table(index=['developer','platform'],
                                       values=['total_sales'],
                                       aggfunc={'total_sales':'sum'}
                                       ).fillna(0)
pltfrm_f17_lead_pvt


# In[76]:


# Gr√°fico de ventas de plataformas Games17
pltfrm_f17_lead_pvt.plot(figsize=(10,5),color='lightseagreen', legend=False, kind='bar', ec='black', grid=True)

plt.title("Decade 2010s, Sales by developer-platform")
plt.xlabel("Platform")
plt.ylabel("USD (millions)")

plt.show()


# Se presenta gr√°fico observando que las plataformas de mejores resultados a nivel de ventas son X360 y PS3 superando los 500 millones de d√≥lares. Esto deduce que ambas han cursado su mejor periodo de rentabilidad, contra XOne y PS4 que las suceden y van en desarrollo para el presente periodo. 
# 
# Se hace evidente que las competidoras por parte de Nintendo se alejan de dicho nivel de ventas, siendo extra√±amente la port√°til 3DS la que mejor compite a nivel de ventas, despeg√°ndose de su segmento de port√°tiles.

# A continuaci√≥n se presentar√°n los gr√°ficos de ventas para el periodo de los 2010s en ambos casos de tipos de plataformas.

# In[77]:


# Filtro de plataformas "Home" con mejores ventas en Games17
pltfrm_hm_f17_lead_yrs_fltr=games17.query("platform==['X360','XOne','Wii','WiiU','PS2','PS3','PS4','PC']")


# In[78]:


# Resumen de ventas por a√±o de las mejores plataformas "Home" Games17
pltfrm_hm_f17_lead_yrs_pvt = pltfrm_hm_f17_lead_yrs_fltr.pivot_table(index=['year_of_release_def'],
                                              columns=['platform'],
                                              values=['total_sales'],
                                              aggfunc={'total_sales':'sum'}
                                             ).fillna(0)
pltfrm_hm_f17_lead_yrs_pvt


# In[79]:


# Gr√°fico de ventas por a√±o de las mejores plataformas "Home" Games17
pltfrm_hm_f17_lead_yrs_pvt.plot(figsize=(10,5),alpha=1,linestyle='--',linewidth='2',color=['silver','lightblue','dodgerblue','royalblue','coral','orangered','greenyellow','limegreen'])

plt.title("Decade 2010s, Home platforms sales")
plt.xlabel("Year")
plt.ylabel("USD (millions)")
plt.legend(['PC','PS2','PS3','PS4','Wii','Wiiu','X360','XOne'],title="Platform")

plt.show()


# La tendencia es decreciente de las plataformas de casa de los 3 desarrolladores (X360, PS3 y Wii), por otro lado sus sucesoras van en crecimiento a partir de 2011 y 2012 (WiiU, XOne y PS4).
# 
# El caso de PC se mantiene en sus niveles ya que depende de condiciones diferentes a las plataformas comerciales.

# In[80]:


# Filtro de plataformas "Handheld" con mejores ventas en Games17
pltfrm_hh_f17_lead_yrs_fltr=games17.query("platform==['3DS','DS','PSP','PSV']")


# In[81]:


# Resumen de ventas por a√±o de las mejores plataformas "Handheld" Games17
pltfrm_hh_f17_lead_yrs_pvt = pltfrm_hh_f17_lead_yrs_fltr.pivot_table(index=['year_of_release_def'],
                                              columns=['platform'],
                                              values=['total_sales'],
                                              aggfunc={'total_sales':'sum'}
                                             ).fillna(0)
pltfrm_hh_f17_lead_yrs_pvt


# In[82]:


# Gr√°fico de ventas por a√±o de las mejores plataformas "Handheld" Games17
pltfrm_hh_f17_lead_yrs_pvt.plot(figsize=(10,5),alpha=1,linestyle='--',linewidth='2',color=['plum','thistle','navy','slateblue'])

plt.title("Decade 2010s, Handheld platforms sales")
plt.xlabel("Year")
plt.ylabel("USD (millions)")
plt.legend(['3DS','DS','PSP','PSV'],title="Platform")

plt.show()


# Por otro lado la tendencia es decreciente de las plataformas port√°tiles de Nintendo y Sony (DS y PSP), por otro lado sus sucesoras van en crecimiento a partir de 2011 (3DS y PSV).

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Genial comparaci√≥n entre plataformas portables y consolas.
# 
# </div>

# ### Crea un diagrama de caja para las ventas globales de todos los juegos desglosados por plataforma. ¬øSon significativas las diferencias en las ventas? ¬øQu√© sucede con las ventas promedio en varias plataformas? Describe tus hallazgos.

# In[83]:


# Diagrama de caja Games17
games17.boxplot(column='total_sales',by=['developer','platform'],figsize=[10,5],rot=90)

plt.title("Decade 2010s, Sales distribution by developer-platform")
plt.xlabel("Platform")
plt.ylabel("USD (millions)")

plt.show()


# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Como sugerencia, cuando tengas gr√°ficas *box-plot* con cajas muy "estrechas" debido a la presencia de numerosos datos at√≠picos, considera incluir una versi√≥n adicional usando escala logar√≠tmica. Esto facilitar√° la comparaci√≥n y el an√°lisis de los datos.
# 
# </div>

# El gr√°fico demuestra que hay un alto n√∫mero de valores at√≠picos referentes a las ventas por plataforma. Debido a ello haremos un filtro que separe el 75% de los valores de menor a mayor para que puedan ser m√°s observables las cajas y bigotes de los datos.

# In[84]:


# Descripci√≥n de vol√∫menes de datos para un mejor an√°lisis
tst_ttl_sls_vg=games17['total_sales'].describe()
tst_ttl_sls_vg


# In[85]:


# Separaci√≥n de vol√∫menes de datos por cuartiles (25% de valores m√°ximos) Games17
tst_ttl_sls_vg_fltr=games17.query("total_sales>=0.4")

# Separaci√≥n de vol√∫menes de datos por cuartiles (75% de valores m√≠nimos) Games17
tst_ttl_sls_vg_fltr_2=games17.query("total_sales<0.4")


# In[86]:


# sumas y cuentas de ambos filtros
print("Suma del 25% de valores m√°ximos de Games17:",tst_ttl_sls_vg_fltr['total_sales'].sum())
print("Conteo del 25% de valores m√°ximos de Games17:",tst_ttl_sls_vg_fltr['total_sales'].count())
print("Suma del 75% de valores m√≠nimos de Games17:",tst_ttl_sls_vg_fltr_2['total_sales'].sum())
print("Conteo del 75% de valores m√≠nimos de Games17:",tst_ttl_sls_vg_fltr_2['total_sales'].count())

print("Total de ventas",games17['total_sales'].sum())
print("Conteo de registros:",games17['total_sales'].count())


# En cuanto al volumen de datos, 1,371 representan el 25% de los datos en Games17, pero la suma de las ventas totales de estos registros asciende a 2,149.81.
# 
# Por otro lado, 4,102 representan el 75% de los datos en Games17, pero la suma de las ventas totales de estos registros asciende solo a 464.55.
# 
# Por lo que se asume que el impacto en ventas totales de los datos at√≠picos representa el 82% del total de ingresos.

# Sin tomar en cuenta el cuartil 4, el 75% de los datos se distribuye de la siguiente manera.

# In[87]:


# Diagrama de caja Games17 del 75% de valores m√≠nimos
tst_ttl_sls_vg_fltr_2.boxplot(column='total_sales',by=['developer','platform'],figsize=[10,5],rot=90)

plt.title("Decade 2010s, Sales distribution by developer-platform (Under 0.4 USD millions)")
plt.xlabel("Platform")
plt.ylabel("USD (millions)")

plt.show()


# In[ ]:





# ### Mira c√≥mo las rese√±as de usuarios y profesionales afectan las ventas de una plataforma popular (tu elecci√≥n). Crea un gr√°fico de dispersi√≥n y calcula la correlaci√≥n entre las rese√±as y las ventas. Saca conclusiones.

# Elegimos PS3, como la plataforma m√°s exitosa en cuanto a ventas totales.

# In[88]:


# DF de PS3
best_pltfrm_fltr=games17.query("platform=='PS3'")
best_pltfrm_fltr


# In[89]:


# Lista de t√≠tulos de PS3, calificaciones y ventas totales
best_pltfrm_pvt=best_pltfrm_fltr.pivot_table(index=['name'],
                                       values=['critic_score','user_score_to_100','total_sales'],
                                       )
best_pltfrm_pvt.sort_values('total_sales',ascending=False).head(20)


# Se presenta listado con los t√≠tulos de PS3 y sus respectivas calificaciones.

# In[90]:


# Gr√°fico de dispersi√≥n de t√≠tulos de PS3, calificaciones y ventas totales. Rojo cr√≠ticos y verde usuarios
plt.figure(figsize=(10,5))
sns.scatterplot(data=best_pltfrm_pvt,y='total_sales',x='critic_score', color='tomato',alpha=.8)
sns.scatterplot(data=best_pltfrm_pvt,y='total_sales',x='user_score_to_100', color='yellowgreen',alpha=.6)


plt.title("Decade 2010s, Scattering Scores - Sales PS3 ")
plt.xlabel("Scores")
plt.ylabel("USD (millions)")

plt.show()


# Se observa en rojo la dispersi√≥n de las calificaciones de cr√≠ticos y en verde las de usuarios. 
# 
# Se puede decir que existe una relaci√≥n importante entre calificaci√≥n y ventas sin embargo (como vimos en el diagrama de caja), los valores at√≠picos afectan de gran manera, por el importe de ventas de ciertos juegos (Hits), lo cual desvirt√∫a el nivel de relaci√≥n.

# In[91]:


# Matriz de correlaci√≥n de t√≠tulos de PS3
best_pltfrm_corr=best_pltfrm_fltr.corr()


# In[92]:


# Mapa de calor de t√≠tulos de PS3
plt.figure(figsize=(9,7))
sns.heatmap(best_pltfrm_corr,annot=True, cmap='RdYlGn')

plt.title("Decade 2010s, Correlational Heat Map PS3")

plt.show()


# Como lo comentamos, la relaci√≥n entre el total de ventas y las calificaciones se ve reducida al punto de representar un bajo nivel de correlaci√≥n.

# In[93]:


# Descripci√≥n de vol√∫menes de datos PS3
best_pltfrm_pvt.describe()


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente an√°lisis de correlaci√≥n, aunque estas se pueden clasificar como d√©biles si logramos ver una tendencia proporcional entre variables como el *user_score* y las ventas por regi√≥n o totales.
# 
# </div>

# ### Teniendo en cuenta tus conclusiones compara las ventas de los mismos juegos en otras plataformas.

# Se eligen los 5 t√≠tulos con un nivel de ventas alto y variedad en plataformas.

# In[94]:


# Elecci√≥n del Top5 de juegos con mejores ventas y mayor variedad en plataformas Games17
vg_multiple_rls_fltr=games17.query("times_released>1")
vg_multiple_rls_pvt=vg_multiple_rls_fltr.pivot_table(index=['name'],
                                                    values=['times_released','total_sales'],
                                                    aggfunc={'times_released':'count','total_sales':'sum'},
                                                    )
vg_multiple_rls_pvt=vg_multiple_rls_pvt.sort_values(['total_sales','times_released'],ascending=False).reset_index().head()
vg_multiple_rls_pvt


# In[95]:


# Ventas totales por plataforma del Top5 de juegos con mejores ventas y mayor diversidad en plataformas Games17
t5_multiple_rls_best_sls=['Grand Theft Auto V','Call of Duty: Black Ops','Call of Duty: Modern Warfare 3','Call of Duty: Black Ops II','Call of Duty: Ghosts']

t5_multiple_rls_best_sls_fltr =games17[games17['name'].isin(t5_multiple_rls_best_sls)].reset_index()
t5_multiple_rls_best_sls_pvt=t5_multiple_rls_best_sls_fltr.pivot_table(index=['name','genre'],
                                                                    columns=['platform'],
                                                                    values=['total_sales'],
                                                                    aggfunc={'total_sales':'sum'},
                                                                      ).fillna(0)
t5_multiple_rls_best_sls_pvt


# As√≠ tambi√©n, se presentan los datos por plataforma.

# In[96]:


# Gr√°fico de ventas totales por plataforma del Top5 de juegos con mejores ventas y mayor diversidad en plataformas Games17
t5_multiple_rls_best_sls_pvt.plot(figsize=(10,7), kind='bar', ec='black',color=['thistle','silver','dodgerblue','royalblue','coral','orangered','greenyellow','limegreen'])

plt.title("Decade 2010s, Top 5 best selling Video games (Platform comparison)")
plt.xlabel("Video game")
plt.ylabel("USD (millions)")
plt.legend(['DS','PC','PS3','PS4','Wii','WiiU','X360','XOne'], title='Platform')

plt.show()


# Aun cuando son t√≠tulos que se lanzaron en m√∫ltiples plataformas, se confirma que estos t√≠tulos son adquiridos por usuarios de plataformas de Sony y Microsoft y debido a sus periodos de lanzamiento, PS3 y X360 son las de mayor uso.

# ### Echa un vistazo a la distribuci√≥n general de los juegos por g√©nero. ¬øQu√© se puede decir de los g√©neros m√°s rentables? ¬øPuedes generalizar acerca de los g√©neros con ventas altas y bajas?

# In[97]:


# Comparaci√≥n de ventas totales por g√©nero Games17
bests_genre_pvt=games17.pivot_table(index=['genre'],
                                   values=['total_sales'],
                                   aggfunc='sum'
                                   )
bests_genre_pvt=bests_genre_pvt.sort_values('total_sales',ascending=False)
bests_genre_pvt


# In[98]:


# Gr√°fico de ventas totales por g√©nero Games17
bests_genre_pvt.plot(figsize=(10,5),color='coral', legend=False, kind='bar', ec='black')

plt.title("Decade 2010s, Sales by Genre")
plt.xlabel("Genre")
plt.ylabel("USD (millions)")

plt.show()


# El presente gr√°fico muestra el nivel de ventas totales por g√©nero, considerando action y shooter los m√°s importantes y dentro de los cuales queda el an√°lisis anterior.

# # Paso 4. Crea un perfil de usuario para cada regi√≥n

# ### Para cada regi√≥n (NA, UE, JP) determina:

# Creamos los listados para obtener los Top5 por regi√≥n que se solicitan posteriormente.

# In[99]:


# Mejores ventas de plataforma por √°rea
t5_plt_area=games17.pivot_table(index='platform',
                             values=['na_sales','eu_sales','jp_sales'],
                             aggfunc='sum'
                            ).fillna(0)

# Condiciones por plataforma
#t5_plt_area=t5_plt_area.sort_values('eu_sales',ascending=False)
#t5_plt_area=t5_plt_area.sort_values('jp_sales',ascending=False)
t5_plt_area=t5_plt_area.sort_values('na_sales',ascending=False)
t5_plt_area


# In[100]:


# Mejores ventas de plataforma por g√©nero
t5_gnr_area=games17.pivot_table(index='genre',
                             values=['na_sales','eu_sales','jp_sales'],
                             aggfunc='sum'
                            ).fillna(0)

# Condiciones por plataforma
#t5_gnr_area=t5_gnr_area.sort_values('eu_sales',ascending=False)
#t5_gnr_area=t5_gnr_area.sort_values('jp_sales',ascending=False)
t5_gnr_area=t5_gnr_area.sort_values('na_sales',ascending=False)

t5_gnr_area


# ### Las cinco plataformas principales. Describe las variaciones en sus cuotas de mercado de una regi√≥n a otra.

# In[101]:


# Mejores ventas de plataforma por √°rea
t5_plt_area_lst=['PS3','X360','PS4','PC','Wii','3DS','PSP','DS','PSV','XOne']
plt_area_fltr =games17[games17['platform'].isin(t5_plt_area_lst)]

plt_area_pvt=plt_area_fltr.pivot_table(index='platform',
                             values=['na_sales','eu_sales','jp_sales'],
                             aggfunc='sum'
                            ).fillna(0)


plt_area_pvt=plt_area_pvt.sort_values('na_sales',ascending=False)
plt_area_pvt


# In[102]:


# Gr√°fico de mejores ventas de plataforma por √°rea
plt_area_pvt.plot(figsize=(10,5), kind='bar', ec='black',color=['orange','red','dodgerblue'])

plt.title("Decade 2010s, Top 5 best selling platform (Area comparison)")
plt.xlabel("Platform")
plt.ylabel("USD (millions)")
plt.legend(['EU','JP','NA'], title='Area')

plt.show()


# En conclusi√≥n con el an√°lisis de ingresos realizado al principio (porcentaje de ventas por regi√≥n) y el an√°lisis de las plataformas m√°s rentables, el presente gr√°fico expone en resumen ambos aspectos.

# ### Los cinco g√©neros principales. Explica la diferencia.

# In[103]:


# Mejores ventas de g√©nero por √°rea
t5_gnr_area_lst=['Action','Shooter','Sports','Role-Playing','Misc','Platform']

gnr_area_fltr =games17[games17['genre'].isin(t5_gnr_area_lst)]

gnr_area_pvt=gnr_area_fltr.pivot_table(index='genre',
                             values=['na_sales','eu_sales','jp_sales'],
                             aggfunc='sum'
                            ).fillna(0)

gnr_area_pvt=gnr_area_pvt.sort_values('na_sales',ascending=False)
gnr_area_pvt


# In[104]:


# Gr√°fico de mejores ventas de g√©nero por √°rea
gnr_area_pvt.plot(figsize=(10,5), kind='bar', ec='black',color=['orange','red','dodgerblue'])

plt.title("Decade 2010s, Top 5 best selling genre (Area comparison)")
plt.xlabel("Genre")
plt.ylabel("USD (millions)")
plt.legend(['EU','JP','NA'], title='Area')

plt.show()


# En conclusi√≥n con el an√°lisis de g√©neros (g√©neros de mayor consumo) y el an√°lisis de las plataformas m√°s rentables, el presente gr√°fico expone en resumen ambos aspectos.

# ### Si las clasificaciones de ESRB afectan a las ventas en regiones individuales.

# In[105]:


# Mejores ventas de rating por √°rea
rtng_area=games17.pivot_table(index=['rating_def'],
                             values=['na_sales','eu_sales','jp_sales'],
                             aggfunc='sum'
                            ).fillna(0)

rtng_area=rtng_area.sort_values('na_sales',ascending=False)
rtng_area


# In[106]:


# Gr√°fico de mejores ventas de rating por √°rea
rtng_area.plot(figsize=(10,5), kind='bar', ec='black',color=['orange','red','dodgerblue'])

plt.title("Decade 2010s, Sales per rating (Area comparison)")
plt.xlabel("Rating")
plt.ylabel("USD (millions)")
plt.legend(['EU','JP','NA'], title='Area')

plt.show()


# Aunque no hay an√°lisis previo en cuanto a clasificaciones, se aprecia que el consumo m√°s importante resulta de las regiones NA y EU referentes a "Mature 17+" seguido de "Everyone", "Teen" y "Everyone 10+".

# Perfil 1.
# 
# NA. Plataforma de casa Microsoft, genero Acci√≥n, clasificaci√≥n M.
# 
# EU. Plataforma de casa Sony, genero Acci√≥n, clasificaci√≥n M.
# 
# JP. Plataforma port√°til Nintendo, genero Juego de rol, clasificaci√≥n E.
# 
# Perfil 2.
# 
# NA. Plataforma de casa Sony, genero Tirador, clasificaci√≥n E.
# 
# EU. Plataforma de casa Microsoft, genero Tirador, clasificaci√≥n E.
# 
# JP. Plataforma de casa Sony, genero Acci√≥n, clasificaci√≥n Teen.
# 
# Se concluye que los perfiles de NA y EU son pr√°cticamente el mismo con una leve diferencia en cuanto a las preferencias entre las plataformas de casa de Microsoft y Sony, clasificaciones M y E, en especial Acci√≥n y Tirador.
# 
# En el caso de JP, el p√∫blico prefiere en una primera instancia la consola port√°til de Nintendo o la plataforma de casa de Sony, con clasificaciones Teen y E, en especial Juegos de rol y Acci√≥n.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# 
# Felicidades por tu excelente trabajo comparando informaci√≥n de videojuegos entre regiones. El uso de herramientas de visualizaci√≥n para este prop√≥sito es una estrategia clave, ya que permite identificar r√°pidamente patrones, tendencias y diferencias que podr√≠an pasar desapercibidas con datos en bruto. Tus visualizaciones no solo facilitan el an√°lisis comparativo, sino que tambi√©n mejoran la comprensi√≥n y comunicaci√≥n de los hallazgos, ayudando a destacar insights cr√≠ticos de forma clara y efectiva. 
# 
# </div>

# # Paso 5. Prueba las siguientes hip√≥tesis:

# ### ‚Äî Las calificaciones promedio de los usuarios para las plataformas Xbox One y PC son las mismas.
# ### Establece tu mismo el valor de umbral alfa.

# H0: Las calificaciones promedio de los usuarios para las plataformas Xbox One y PC son iguales
# 
# H1: Las calificaciones promedio de los usuarios para las plataformas Xbox One y PC son diferentes
# 
# alpha = 0.05

# In[107]:


# Comprobaci√≥n de hip√≥tesis de plataformas
mean_usr_scr_xone_fltr = games.query("platform == 'XOne'")['user_score']
mean_usr_scr_pc_fltr= games.query("platform == 'PC'")['user_score']
alpha = 0.05

h0_plt = st.ttest_ind(mean_usr_scr_xone_fltr,mean_usr_scr_pc_fltr,equal_var=False)

print('valor p :', h0_plt.pvalue)

if (h0_plt.pvalue<alpha):
    print("Rechazamos la hip√≥tesis nula, existe una diferencia significativa entre las calificaciones promedio de XOne y PC")
else:
    print("No podemos rechazar la hip√≥tesis nula, la diferencia entre as calificaciones promedio de XOne y PC no es significativa")


# ### ‚Äî Las calificaciones promedio de los usuarios para los g√©neros de Acci√≥n y Deportes son diferentes.
# ### Establece tu mismo el valor de umbral alfa.

# H0: Las calificaciones promedio de los usuarios para los g√©neros de Acci√≥n y Deportes son iguales
# 
# H1: Las calificaciones promedio de los usuarios para los g√©neros de Acci√≥n y Deportes son diferentes
# 
# alpha = 0.05

# In[108]:


# Comprobaci√≥n de hip√≥tesis de g√©neros
mean_usr_scr_action_fltr = games.query("genre == 'Action'")['user_score']
mean_usr_scr_sports_fltr = games.query("genre == 'Sports'")['user_score']
alpha = 0.05

h0_gnr = st.ttest_ind(mean_usr_scr_action_fltr,mean_usr_scr_sports_fltr,equal_var=False)

print('valor p:', h0_gnr.pvalue)

if (h0_gnr.pvalue<alpha):
    print("Rechazamos la hip√≥tesis nula H0, existe una diferencia significativa entre las calificaciones promedio de Acci√≥n y Deportes")
else:
    print("No podemos rechazar la hip√≥tesis nula, la diferencia entre as calificaciones promedio de Acci√≥n y Deportes no es significativa")


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteraci√≥n)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# ¬°Excelente trabajo en la implementaci√≥n de la metodolog√≠a para la prueba de hip√≥tesis! La forma estructurada y rigurosa en que abordaste el problema demuestra un gran dominio del proceso estad√≠stico y un compromiso por garantizar resultados confiables. Aplicar una metodolog√≠a s√≥lida no solo fortalece la validez de tus conclusiones, sino que tambi√©n refleja un enfoque profesional al an√°lisis de datos. Este tipo de rigor es esencial para tomar decisiones basadas en evidencia y da un gran valor a√±adido a tu proyecto.
# 
# </div>

# ### Explica:
# ### ‚Äî C√≥mo formulaste las hip√≥tesis nula y alternativa.
# ### ‚Äî Qu√© criterio utilizaste para probar las hip√≥tesis y por qu√©.

# Se plantean las hip√≥tesis nulas con la igualdad de los datos solicitados, en el primer caso entre plataformas y en el segundo entre g√©neros y las hip√≥tesis alternativas en contraposici√≥n.
# 
# Se toma alpha como 0.05 de manera pr√°ctica.

# # Paso 6. Escribe una conclusi√≥n general

# ### Formato: Completa la tarea en Jupyter Notebook. Inserta el c√≥digo de programaci√≥n en las celdas code y las explicaciones de texto en las celdas markdown. Aplica formato y agrega encabezados.

# Me pareci√≥ una buena pr√°ctica, abarcando conocimientos desde el principio del curso hasta el presente sprint, el hecho de empezar en un notebook completamente limpio tambi√©n represent√≥ un reto. 
# 
# Sigue habiendo una l√≠nea de estudio a seguir, la cual nos lleva a un objetivo com√∫n y a pesar de ello parecen existir diversidad de opciones para la consecuci√≥n de los resultados.
# 
# En mi caso muy particular, opt√© por algunos pasos adicionales en el enriquecimiento de la informaci√≥n, datos como:
# 
# * Desarrollador
# * Nombre de la Plataforma
# * A√±o de lanzamiento definitivo
# * D√©cada
# * N√∫mero de lanzamientos por t√≠tulo
# * N√∫mero de a√±os de lanzamientos por t√≠tulo
# * Clasificaci√≥n definitiva
# * Calificaci√≥n de usuarios de 1 a 100
# 
# Que si bien representaban importes m√≠nimos para el an√°lisis, de alguna manera suman para un an√°lisis m√°s detallado y para el aprendizaje de c√≥mo realizar dichas actividades.
# 
# Fuera del aspecto de programaci√≥n, practicar las explicaciones para mejorar las habilidades de interpretaci√≥n de datos, tanto tablas como gr√°ficos.
# 
# Me gustar√≠a saber c√≥mo optimizar procesos de obtenci√≥n de informaci√≥n y utilizaci√≥n m√∫ltiple.
# 
# Gracias.
